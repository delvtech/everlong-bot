"""Dataclasses for all structs in the IEverlongStrategy contract.

DO NOT EDIT.  This file was generated by pypechain v0.0.49.
See documentation at https://github.com/delvtech/pypechain """

# super() call methods are generic, while our version adds values & types
# pylint: disable=arguments-differ

# contracts have PascalCase names
# pylint: disable=invalid-name

# contracts control how many attributes and arguments we have in generated code
# pylint: disable=too-many-instance-attributes
# pylint: disable=too-many-arguments

# unable to determine which imports will be used in the generated code
# pylint: disable=unused-import

# we don't need else statement if the other conditionals all have return,
# but it's easier to generate
# pylint: disable=no-else-return

# We import this contract itself to ensure all nested structs have a fully qualified name.
# We use this to avoid namespace collisions, as well as having a uniform
# type structure to do lookups when functions return these structs.
# pylint: disable=import-self


from __future__ import annotations

from dataclasses import dataclass

from pypechain.core import BaseEvent, BaseEventArgs


@dataclass(kw_only=True)
class ApprovalEvent(BaseEvent):
    """The event type for event Approval"""

    @dataclass(kw_only=True)
    class ApprovalEventArgs(BaseEventArgs):
        """The args to the event Approval"""

        owner: str
        spender: str
        value: int

    # We redefine the args field with the specific event arg type.
    args: ApprovalEventArgs  # type: ignore[override]

    __name__: str = "Approval"


@dataclass(kw_only=True)
class DepositEvent(BaseEvent):
    """The event type for event Deposit"""

    @dataclass(kw_only=True)
    class DepositEventArgs(BaseEventArgs):
        """The args to the event Deposit"""

        sender: str
        owner: str
        assets: int
        shares: int

    # We redefine the args field with the specific event arg type.
    args: DepositEventArgs  # type: ignore[override]

    __name__: str = "Deposit"


@dataclass(kw_only=True)
class NewTokenizedStrategyEvent(BaseEvent):
    """The event type for event NewTokenizedStrategy"""

    @dataclass(kw_only=True)
    class NewTokenizedStrategyEventArgs(BaseEventArgs):
        """The args to the event NewTokenizedStrategy"""

        strategy: str
        asset: str
        apiVersion: str

    # We redefine the args field with the specific event arg type.
    args: NewTokenizedStrategyEventArgs  # type: ignore[override]

    __name__: str = "NewTokenizedStrategy"


@dataclass(kw_only=True)
class PositionClosedEvent(BaseEvent):
    """The event type for event PositionClosed"""

    @dataclass(kw_only=True)
    class PositionClosedEventArgs(BaseEventArgs):
        """The args to the event PositionClosed"""

        maturityTime: int
        bondAmount: int

    # We redefine the args field with the specific event arg type.
    args: PositionClosedEventArgs  # type: ignore[override]

    __name__: str = "PositionClosed"


@dataclass(kw_only=True)
class PositionOpenedEvent(BaseEvent):
    """The event type for event PositionOpened"""

    @dataclass(kw_only=True)
    class PositionOpenedEventArgs(BaseEventArgs):
        """The args to the event PositionOpened"""

        maturityTime: int
        bondAmount: int

    # We redefine the args field with the specific event arg type.
    args: PositionOpenedEventArgs  # type: ignore[override]

    __name__: str = "PositionOpened"


@dataclass(kw_only=True)
class ReportedEvent(BaseEvent):
    """The event type for event Reported"""

    @dataclass(kw_only=True)
    class ReportedEventArgs(BaseEventArgs):
        """The args to the event Reported"""

        profit: int
        loss: int
        protocolFees: int
        performanceFees: int

    # We redefine the args field with the specific event arg type.
    args: ReportedEventArgs  # type: ignore[override]

    __name__: str = "Reported"


@dataclass(kw_only=True)
class StrategyShutdownEvent(BaseEvent):
    """The event type for event StrategyShutdown"""

    __name__: str = "StrategyShutdown"


@dataclass(kw_only=True)
class TransferEvent(BaseEvent):
    """The event type for event Transfer"""

    @dataclass(kw_only=True)
    class TransferEventArgs(BaseEventArgs):
        """The args to the event Transfer"""

        _from: str
        to: str
        value: int

    # We redefine the args field with the specific event arg type.
    args: TransferEventArgs  # type: ignore[override]

    __name__: str = "Transfer"


@dataclass(kw_only=True)
class UpdateEmergencyAdminEvent(BaseEvent):
    """The event type for event UpdateEmergencyAdmin"""

    @dataclass(kw_only=True)
    class UpdateEmergencyAdminEventArgs(BaseEventArgs):
        """The args to the event UpdateEmergencyAdmin"""

        newEmergencyAdmin: str

    # We redefine the args field with the specific event arg type.
    args: UpdateEmergencyAdminEventArgs  # type: ignore[override]

    __name__: str = "UpdateEmergencyAdmin"


@dataclass(kw_only=True)
class UpdateKeeperEvent(BaseEvent):
    """The event type for event UpdateKeeper"""

    @dataclass(kw_only=True)
    class UpdateKeeperEventArgs(BaseEventArgs):
        """The args to the event UpdateKeeper"""

        newKeeper: str

    # We redefine the args field with the specific event arg type.
    args: UpdateKeeperEventArgs  # type: ignore[override]

    __name__: str = "UpdateKeeper"


@dataclass(kw_only=True)
class UpdateManagementEvent(BaseEvent):
    """The event type for event UpdateManagement"""

    @dataclass(kw_only=True)
    class UpdateManagementEventArgs(BaseEventArgs):
        """The args to the event UpdateManagement"""

        newManagement: str

    # We redefine the args field with the specific event arg type.
    args: UpdateManagementEventArgs  # type: ignore[override]

    __name__: str = "UpdateManagement"


@dataclass(kw_only=True)
class UpdatePendingManagementEvent(BaseEvent):
    """The event type for event UpdatePendingManagement"""

    @dataclass(kw_only=True)
    class UpdatePendingManagementEventArgs(BaseEventArgs):
        """The args to the event UpdatePendingManagement"""

        newPendingManagement: str

    # We redefine the args field with the specific event arg type.
    args: UpdatePendingManagementEventArgs  # type: ignore[override]

    __name__: str = "UpdatePendingManagement"


@dataclass(kw_only=True)
class UpdatePerformanceFeeEvent(BaseEvent):
    """The event type for event UpdatePerformanceFee"""

    @dataclass(kw_only=True)
    class UpdatePerformanceFeeEventArgs(BaseEventArgs):
        """The args to the event UpdatePerformanceFee"""

        newPerformanceFee: int

    # We redefine the args field with the specific event arg type.
    args: UpdatePerformanceFeeEventArgs  # type: ignore[override]

    __name__: str = "UpdatePerformanceFee"


@dataclass(kw_only=True)
class UpdatePerformanceFeeRecipientEvent(BaseEvent):
    """The event type for event UpdatePerformanceFeeRecipient"""

    @dataclass(kw_only=True)
    class UpdatePerformanceFeeRecipientEventArgs(BaseEventArgs):
        """The args to the event UpdatePerformanceFeeRecipient"""

        newPerformanceFeeRecipient: str

    # We redefine the args field with the specific event arg type.
    args: UpdatePerformanceFeeRecipientEventArgs  # type: ignore[override]

    __name__: str = "UpdatePerformanceFeeRecipient"


@dataclass(kw_only=True)
class UpdateProfitMaxUnlockTimeEvent(BaseEvent):
    """The event type for event UpdateProfitMaxUnlockTime"""

    @dataclass(kw_only=True)
    class UpdateProfitMaxUnlockTimeEventArgs(BaseEventArgs):
        """The args to the event UpdateProfitMaxUnlockTime"""

        newProfitMaxUnlockTime: int

    # We redefine the args field with the specific event arg type.
    args: UpdateProfitMaxUnlockTimeEventArgs  # type: ignore[override]

    __name__: str = "UpdateProfitMaxUnlockTime"


@dataclass(kw_only=True)
class WithdrawEvent(BaseEvent):
    """The event type for event Withdraw"""

    @dataclass(kw_only=True)
    class WithdrawEventArgs(BaseEventArgs):
        """The args to the event Withdraw"""

        sender: str
        receiver: str
        owner: str
        assets: int
        shares: int

    # We redefine the args field with the specific event arg type.
    args: WithdrawEventArgs  # type: ignore[override]

    __name__: str = "Withdraw"


@dataclass
class TendConfig:
    """TendConfig struct."""

    minOutput: int
    minVaultSharePrice: int
    positionClosureLimit: int
    extraData: bytes


@dataclass
class Position:
    """Position struct."""

    maturityTime: int
    bondAmount: int
