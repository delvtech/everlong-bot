"""Dataclasses for all structs in the IVault contract.

DO NOT EDIT.  This file was generated by pypechain v0.0.49.
See documentation at https://github.com/delvtech/pypechain """

# super() call methods are generic, while our version adds values & types
# pylint: disable=arguments-differ

# contracts have PascalCase names
# pylint: disable=invalid-name

# contracts control how many attributes and arguments we have in generated code
# pylint: disable=too-many-instance-attributes
# pylint: disable=too-many-arguments

# unable to determine which imports will be used in the generated code
# pylint: disable=unused-import

# we don't need else statement if the other conditionals all have return,
# but it's easier to generate
# pylint: disable=no-else-return

# We import this contract itself to ensure all nested structs have a fully qualified name.
# We use this to avoid namespace collisions, as well as having a uniform
# type structure to do lookups when functions return these structs.
# pylint: disable=import-self


from __future__ import annotations

from dataclasses import dataclass

from pypechain.core import BaseEvent, BaseEventArgs


@dataclass(kw_only=True)
class ApprovalEvent(BaseEvent):
    """The event type for event Approval"""

    @dataclass(kw_only=True)
    class ApprovalEventArgs(BaseEventArgs):
        """The args to the event Approval"""

        owner: str
        spender: str
        value: int

    # We redefine the args field with the specific event arg type.
    args: ApprovalEventArgs  # type: ignore[override]

    __name__: str = "Approval"


@dataclass(kw_only=True)
class DebtPurchasedEvent(BaseEvent):
    """The event type for event DebtPurchased"""

    @dataclass(kw_only=True)
    class DebtPurchasedEventArgs(BaseEventArgs):
        """The args to the event DebtPurchased"""

        strategy: str
        amount: int

    # We redefine the args field with the specific event arg type.
    args: DebtPurchasedEventArgs  # type: ignore[override]

    __name__: str = "DebtPurchased"


@dataclass(kw_only=True)
class DebtUpdatedEvent(BaseEvent):
    """The event type for event DebtUpdated"""

    @dataclass(kw_only=True)
    class DebtUpdatedEventArgs(BaseEventArgs):
        """The args to the event DebtUpdated"""

        strategy: str
        current_debt: int
        new_debt: int

    # We redefine the args field with the specific event arg type.
    args: DebtUpdatedEventArgs  # type: ignore[override]

    __name__: str = "DebtUpdated"


@dataclass(kw_only=True)
class DepositEvent(BaseEvent):
    """The event type for event Deposit"""

    @dataclass(kw_only=True)
    class DepositEventArgs(BaseEventArgs):
        """The args to the event Deposit"""

        sender: str
        owner: str
        assets: int
        shares: int

    # We redefine the args field with the specific event arg type.
    args: DepositEventArgs  # type: ignore[override]

    __name__: str = "Deposit"


@dataclass(kw_only=True)
class RoleSetEvent(BaseEvent):
    """The event type for event RoleSet"""

    @dataclass(kw_only=True)
    class RoleSetEventArgs(BaseEventArgs):
        """The args to the event RoleSet"""

        account: str
        role: int

    # We redefine the args field with the specific event arg type.
    args: RoleSetEventArgs  # type: ignore[override]

    __name__: str = "RoleSet"


@dataclass(kw_only=True)
class ShutdownEvent(BaseEvent):
    """The event type for event Shutdown"""

    __name__: str = "Shutdown"


@dataclass(kw_only=True)
class StrategyChangedEvent(BaseEvent):
    """The event type for event StrategyChanged"""

    @dataclass(kw_only=True)
    class StrategyChangedEventArgs(BaseEventArgs):
        """The args to the event StrategyChanged"""

        strategy: str
        change_type: int

    # We redefine the args field with the specific event arg type.
    args: StrategyChangedEventArgs  # type: ignore[override]

    __name__: str = "StrategyChanged"


@dataclass(kw_only=True)
class StrategyReportedEvent(BaseEvent):
    """The event type for event StrategyReported"""

    @dataclass(kw_only=True)
    class StrategyReportedEventArgs(BaseEventArgs):
        """The args to the event StrategyReported"""

        strategy: str
        gain: int
        loss: int
        current_debt: int
        protocol_fees: int
        total_fees: int
        total_refunds: int

    # We redefine the args field with the specific event arg type.
    args: StrategyReportedEventArgs  # type: ignore[override]

    __name__: str = "StrategyReported"


@dataclass(kw_only=True)
class TransferEvent(BaseEvent):
    """The event type for event Transfer"""

    @dataclass(kw_only=True)
    class TransferEventArgs(BaseEventArgs):
        """The args to the event Transfer"""

        _from: str
        to: str
        value: int

    # We redefine the args field with the specific event arg type.
    args: TransferEventArgs  # type: ignore[override]

    __name__: str = "Transfer"


@dataclass(kw_only=True)
class UpdateAccountantEvent(BaseEvent):
    """The event type for event UpdateAccountant"""

    @dataclass(kw_only=True)
    class UpdateAccountantEventArgs(BaseEventArgs):
        """The args to the event UpdateAccountant"""

        accountant: str

    # We redefine the args field with the specific event arg type.
    args: UpdateAccountantEventArgs  # type: ignore[override]

    __name__: str = "UpdateAccountant"


@dataclass(kw_only=True)
class UpdateAutoAllocateEvent(BaseEvent):
    """The event type for event UpdateAutoAllocate"""

    @dataclass(kw_only=True)
    class UpdateAutoAllocateEventArgs(BaseEventArgs):
        """The args to the event UpdateAutoAllocate"""

        auto_allocate: bool

    # We redefine the args field with the specific event arg type.
    args: UpdateAutoAllocateEventArgs  # type: ignore[override]

    __name__: str = "UpdateAutoAllocate"


@dataclass(kw_only=True)
class UpdateDefaultQueueEvent(BaseEvent):
    """The event type for event UpdateDefaultQueue"""

    @dataclass(kw_only=True)
    class UpdateDefaultQueueEventArgs(BaseEventArgs):
        """The args to the event UpdateDefaultQueue"""

        new_default_queue: list[str]

    # We redefine the args field with the specific event arg type.
    args: UpdateDefaultQueueEventArgs  # type: ignore[override]

    __name__: str = "UpdateDefaultQueue"


@dataclass(kw_only=True)
class UpdateDepositLimitEvent(BaseEvent):
    """The event type for event UpdateDepositLimit"""

    @dataclass(kw_only=True)
    class UpdateDepositLimitEventArgs(BaseEventArgs):
        """The args to the event UpdateDepositLimit"""

        deposit_limit: int

    # We redefine the args field with the specific event arg type.
    args: UpdateDepositLimitEventArgs  # type: ignore[override]

    __name__: str = "UpdateDepositLimit"


@dataclass(kw_only=True)
class UpdateFutureRoleManagerEvent(BaseEvent):
    """The event type for event UpdateFutureRoleManager"""

    @dataclass(kw_only=True)
    class UpdateFutureRoleManagerEventArgs(BaseEventArgs):
        """The args to the event UpdateFutureRoleManager"""

        future_role_manager: str

    # We redefine the args field with the specific event arg type.
    args: UpdateFutureRoleManagerEventArgs  # type: ignore[override]

    __name__: str = "UpdateFutureRoleManager"


@dataclass(kw_only=True)
class UpdateMinimumTotalIdleEvent(BaseEvent):
    """The event type for event UpdateMinimumTotalIdle"""

    @dataclass(kw_only=True)
    class UpdateMinimumTotalIdleEventArgs(BaseEventArgs):
        """The args to the event UpdateMinimumTotalIdle"""

        minimum_total_idle: int

    # We redefine the args field with the specific event arg type.
    args: UpdateMinimumTotalIdleEventArgs  # type: ignore[override]

    __name__: str = "UpdateMinimumTotalIdle"


@dataclass(kw_only=True)
class UpdateProfitMaxUnlockTimeEvent(BaseEvent):
    """The event type for event UpdateProfitMaxUnlockTime"""

    @dataclass(kw_only=True)
    class UpdateProfitMaxUnlockTimeEventArgs(BaseEventArgs):
        """The args to the event UpdateProfitMaxUnlockTime"""

        profit_max_unlock_time: int

    # We redefine the args field with the specific event arg type.
    args: UpdateProfitMaxUnlockTimeEventArgs  # type: ignore[override]

    __name__: str = "UpdateProfitMaxUnlockTime"


@dataclass(kw_only=True)
class UpdateRoleManagerEvent(BaseEvent):
    """The event type for event UpdateRoleManager"""

    @dataclass(kw_only=True)
    class UpdateRoleManagerEventArgs(BaseEventArgs):
        """The args to the event UpdateRoleManager"""

        role_manager: str

    # We redefine the args field with the specific event arg type.
    args: UpdateRoleManagerEventArgs  # type: ignore[override]

    __name__: str = "UpdateRoleManager"


@dataclass(kw_only=True)
class UpdateUseDefaultQueueEvent(BaseEvent):
    """The event type for event UpdateUseDefaultQueue"""

    @dataclass(kw_only=True)
    class UpdateUseDefaultQueueEventArgs(BaseEventArgs):
        """The args to the event UpdateUseDefaultQueue"""

        use_default_queue: bool

    # We redefine the args field with the specific event arg type.
    args: UpdateUseDefaultQueueEventArgs  # type: ignore[override]

    __name__: str = "UpdateUseDefaultQueue"


@dataclass(kw_only=True)
class UpdatedMaxDebtForStrategyEvent(BaseEvent):
    """The event type for event UpdatedMaxDebtForStrategy"""

    @dataclass(kw_only=True)
    class UpdatedMaxDebtForStrategyEventArgs(BaseEventArgs):
        """The args to the event UpdatedMaxDebtForStrategy"""

        sender: str
        strategy: str
        new_debt: int

    # We redefine the args field with the specific event arg type.
    args: UpdatedMaxDebtForStrategyEventArgs  # type: ignore[override]

    __name__: str = "UpdatedMaxDebtForStrategy"


@dataclass(kw_only=True)
class WithdrawEvent(BaseEvent):
    """The event type for event Withdraw"""

    @dataclass(kw_only=True)
    class WithdrawEventArgs(BaseEventArgs):
        """The args to the event Withdraw"""

        sender: str
        receiver: str
        owner: str
        assets: int
        shares: int

    # We redefine the args field with the specific event arg type.
    args: WithdrawEventArgs  # type: ignore[override]

    __name__: str = "Withdraw"


@dataclass
class StrategyParams:
    """StrategyParams struct."""

    activation: int
    last_report: int
    current_debt: int
    max_debt: int
